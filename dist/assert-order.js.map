{"version":3,"file":"assert-order.js","sources":["../../../../../../assert-order/assertOrder.ts","../../../../../../assert-order/index.ts"],"sourcesContent":["export interface Steps {\n  once?: number[]\n  some?: number[]\n  all?: number[]\n}\n\nexport class AssertOrder {\n  private static alias = {\n    step: 'once',\n    any: 'once'\n  }\n  private static reverseAlias = {\n    once: ['step'],\n    some: [],\n    all: []\n  }\n\n  /**\n   * Gets what is the next expecting step.\n   * If the current step is `some(n)`, this reflects the step after `some(n)`\n   */\n  public get next() { return this.nextStep }\n  private nextStep: number\n  private possibleMoves: Steps\n  private miniSteps = 0\n  private targetMiniSteps: number | undefined\n  constructor(public plannedSteps?: number, initStep = 0) {\n    this.nextStep = initStep\n    this.possibleMoves = {\n      once: [initStep],\n      some: [initStep],\n      all: [initStep]\n    }\n  }\n\n  /**\n   * Verify all planned steps are executed.\n   * @param timeout If specified, will return a promise that resolve after the specified time (in milliseconds) or rejected if failed.\n   */\n  end(timeout: number): Promise<never>\n  end(): void\n  end(timeout?: number) {\n    const check = (() => {\n      return this.plannedSteps === undefined || this.nextStep === this.plannedSteps\n    })\n    const getErrorMsg = () => `Planned ${this.plannedSteps} steps but executed ${this.nextStep} steps`\n\n    if (timeout) {\n      return new Promise((resolve, reject) => {\n        setTimeout(() => {\n          if (check()) {\n            resolve()\n          }\n          else {\n            reject(new Error(getErrorMsg()))\n          }\n        }, timeout);\n      })\n    }\n\n    if (!check()) {\n      throw new Error(getErrorMsg())\n    }\n  }\n\n  step(step: number) {\n    if (this.isValidStep('step', [step])) {\n      this.moveNext()\n      return this.nextStep++\n    }\n    else {\n      throw new Error(this.getErrorMessage('step', step))\n    }\n  }\n\n  /**\n   * Assert the specified step will run once.\n   */\n  once(step: number) {\n    // this.validate('once', [step], 1)\n    if (this.isValidStep('once', [step])) {\n      this.moveNext()\n      return this.nextStep++\n    }\n    else {\n      throw new Error(this.getErrorMessage('once', step))\n    }\n  }\n\n  /**\n   * Assert this place will be called during any of the specified steps.\n   * @returns the step it is being called right now.\n   */\n  any(...anySteps: number[]) {\n    if (this.isValidStep('any', anySteps)) {\n      this.moveNext()\n      return this.nextStep++\n    }\n    else {\n      throw new Error(this.getErrorMessage('any', ...anySteps))\n    }\n  }\n\n  /**\n   * Assert the specified step will be reached at least once.\n   * @returns how many times this step has occured.\n   */\n  some(step: number) {\n    if (this.isValidStep('some', [step])) {\n      if (step === this.nextStep) {\n        this.moveNext({\n          once: [step + 1],\n          some: [step, step + 1],\n          all: [step + 1]\n        })\n        this.miniSteps = 0\n        this.nextStep++\n      }\n\n      return ++this.miniSteps\n    }\n    else {\n      throw new Error(this.getErrorMessage('some', step))\n    }\n  }\n\n  /**\n   * Assert the specified step will be reached x times.\n   * @returns how many times this step has occured.\n   */\n  all(step: number, plan: number) {\n    if (plan <= 0) {\n      throw new Error(`${plan} is not a valid 'plan' value.`)\n    }\n    if (this.targetMiniSteps && this.targetMiniSteps !== plan) {\n      throw new Error(`The plan count (${plan}) does not match with previous value (${this.targetMiniSteps}).`)\n    }\n\n    if (this.isValidStep('all', [step], plan)) {\n      if (this.targetMiniSteps === undefined) {\n        this.targetMiniSteps = plan\n        this.miniSteps = 0\n        this.moveNext({\n          all: [step]\n        })\n      }\n\n      this.miniSteps++\n      if (plan === this.miniSteps) {\n        this.moveNext()\n        this.nextStep++\n        this.targetMiniSteps = undefined\n      }\n      return this.miniSteps\n    }\n    else {\n      throw new Error(this.getErrorMessage('all', step))\n    }\n  }\n\n  private isValidStep(fnName: string, steps: number[], count?: number) {\n    // console.log(`${fnName}(${steps}${count ? ',' + count : ''}), c: ${this.currentStep}, m: ${this.miniSteps}`, this.possibleMoves)\n    const id = AssertOrder.alias[fnName] || fnName\n    const step = steps.find(s => this.possibleMoves[id] && this.possibleMoves[id].some(x => x === s))\n    return (!count || this.miniSteps <= count) && step !== undefined\n  }\n  private moveNext(nextMoves: Steps = {\n    once: [this.nextStep + 1],\n    some: [this.nextStep + 1],\n    all: [this.nextStep + 1]\n  }) {\n    this.possibleMoves = nextMoves\n  }\n\n  private getErrorMessage(calledFn: string, ...calledSteps: number[]) {\n    const should: string[] = []\n    for (let key in this.possibleMoves) {\n      should.push(...([key, ...AssertOrder.reverseAlias[key]].map(name =>\n        `'${name}(${this.possibleMoves[key].join('|')})'`\n      )))\n    }\n\n    return `Expecting ${should.join(', ')}, but received '${calledFn}(${calledSteps.join(',')})'`\n  }\n}\n","import { AssertOrder } from './assertOrder'\nexport default AssertOrder\n"],"names":[],"mappings":"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"}